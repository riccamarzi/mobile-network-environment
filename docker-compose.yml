version: '3.9'
services:
        mongo:
                image: mongo:4
                container_name: mongo
                healthcheck:
                        test: ["CMD", "mongo", "mongodb://127.0.0.1"]
                        interval: 5s
                        timeout: 5s       
                env_file:
                        - .env
                networks:
                        appnet:
                                ipv4_address: ${MONGO_IP}
        ########## OPEN5GS ########################
        open5gs_hss: 
                build: ./open5gs
                image: open5gs_docker
                container_name: open5gs_hss
                tty: true
                stdin_open: true
                expose:
                        - "3868/tcp"
                        - "3868/udp"
                depends_on:
                       mongo:
                               condition: service_healthy
                environment:
                        - OPEN5GS_COMPONENT=hss
                volumes: 
                        - ./open5gs/hss:/mnt
                env_file:
                        - .env
                networks:
                        appnet:
                                ipv4_address: ${HSS_IP}
                                aliases:
                                        - hss
                                        - hss.ims.mnc001.mcc001.3gppnetwork.org
                                        - hss.epc.mnc001.mcc001.3gppnetwork.org
                                        - hss.open-ims.test
        open5gs_mme:
                image: open5gs_docker
                container_name: open5gs_mme
                tty: true
                stdin_open: true
                volumes:
                        - ./open5gs/mme:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=mme
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_MME_IP}
        open5gs_sgwc:
                image: open5gs_docker
                container_name: open5gs_sgwc
                tty: true
                stdin_open: true
                volumes:
                        - ./open5gs/sgwc:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=sgwc
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_SGWC_IP}
        open5gs_sgwu:
                image: open5gs_docker
                container_name: open5gs_sgwu
                tty: true
                stdin_open: true
                volumes:
                        - ./open5gs/sgwu:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=sgwu
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_SGWU_IP}
        open5gs_smf:
                image: open5gs_docker
                container_name: open5gs_smf
                tty: true
                stdin_open: true
                volumes:
                        - ./open5gs/smf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=smf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_SMF_IP}
        open5gs_upf:
                image: open5gs_docker
                container_name: open5gs_upf
                cap_add:
                        - NET_ADMIN
                privileged: true
                sysctls:
                        - net.ipv4.ip_forward=1
                tty: true
                stdin_open: true
                volumes:
                        - ./open5gs/upf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=upf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_UPF_IP}
        open5gs_amf:
                image: open5gs_docker
                container_name: open5gs_amf
                tty: true
                stdin_open: true
                volumes:
                        - ./open5gs/amf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=amf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_AMF_IP}
        open5gs_pcrf:
                image: open5gs_docker
                container_name: open5gs_pcrf
                tty: true
                stdin_open: true
                volumes:
                        - ./open5gs/pcrf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=pcrf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_PCRF_IP}
                                aliases:
                                        - pcrf.epc.mnc001.mcc001.3gppnetwork.org
        open5gs_nrf:
                image: open5gs_docker
                container_name: open5gs_nrf
                volumes: 
                        - ./open5gs/nrf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=nrf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_NRF_IP}
        open5gs_ausf:
                image: open5gs_docker
                container_name: open5gs_ausf
                volumes: 
                        - ./open5gs/ausf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=ausf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_AUSF_IP}
        open5gs_udm:
                image: open5gs_docker
                container_name: open5gs_udm
                volumes: 
                        - ./open5gs/udm:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=udm
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_UDM_IP}
        open5gs_pcf:
                image: open5gs_docker
                container_name: open5gs_pcf
                volumes: 
                        - ./open5gs/pcf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=pcf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_PCF_IP}
        open5gs_nssf:
                image: open5gs_docker
                container_name: open5gs_nssf
                volumes: 
                        - ./open5gs/nssf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=nssf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_NSSF_IP}
        open5gs_bsf:
                image: open5gs_docker
                container_name: open5gs_bsf
                volumes: 
                        - ./open5gs/bsf:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=bsf
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_BSF_IP}
        open5gs_udr:
                image: open5gs_docker
                container_name: open5gs_udr
                volumes: 
                        - ./open5gs/udr:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=udr
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_UDR_IP}
        open5gs_webui:
                image: open5gs_docker
                container_name: open5gs_webui
                expose:
                        - "3000/tcp"
                ports:
                        - "3000:3000/tcp"
                volumes: 
                        - ./open5gs/webui:/mnt
                depends_on:
                        - open5gs_hss
                env_file:
                        - .env
                environment:
                        - OPEN5GS_COMPONENT=webui
                networks:
                        appnet:
                                ipv4_address: ${OPEN5GS_WEBUI_IP}
        open5gs_fhoss:
                build: ./open5gs/fhoss
                image: open5gs_fhoss_image
                expose: 
                        - "8080/tcp"
                ports:
                        - "8080:8080/tcp"
                depends_on:
                        mysql:
                                condition: service_healthy
                tty: true
                stdin_open: true
                container_name: open5gs_fhoss
                volumes:
                        - ./open5gs/fhoss:/mnt
                env_file:
                        - .env
                networks:
                        appnet: 
                                ipv4_address: ${OPEN5GS_FHOSS_IP}
        ############## END OPEN5GS ###############
        ############## KAMAILIO ##################
        pcscf:
                build: ./kamailio_docker
                image: kamailio_docker
                container_name: kamailio_pcscf
                tty: true 
                stdin_open: true
                volumes:
                        - ./kamailio_docker/pcscf:/mnt
                env_file:
                        - .env
                environment:
                        - KAMAILIO_COMPONENT=pcscf
                depends_on: 
                        mysql:
                                condition: service_healthy
                networks:
                        appnet:
                                ipv4_address: ${KAMAILIO_PCSCF_IP}
                                aliases:
                                        - pcscf
                                        - pcscf.ims.mnc001.mcc001.3gppnetwork.org
        mysql: 
                image: mysql:5.7
                container_name: mysql
                environment:
                        - MYSQL_ROOT_PASSWORD=${KAMAILIO_MYSQL_PWD}
                tty: true
                stdin_open: true
                env_file:
                        - .env
                networks:
                        appnet:
                                ipv4_address: ${KAMAILIO_MYSQL_IP}
                expose:
                        - "3306/tcp"
                healthcheck:
                        test: ["CMD", "mysql", "-u", "root", "-proot"]
                        timeout: 10s
                        interval: 10s
        icscf:
                image: kamailio_docker
                environment:
                        - KAMAILIO_COMPONENT=icscf
                env_file:
                        - .env
                container_name: kamailio_icscf
                dns: 
                        - 8.8.8.8
                        - ${DNS_IP}
                dns_search:
                        - ims.mnc001.mcc001.3gppnetwork.org
                tty: true
                stdin_open: true
                volumes:
                        - ./kamailio_docker/icscf:/mnt
                depends_on: 
                        - pcscf
                networks:
                        appnet:
                                ipv4_address: ${KAMAILIO_ICSCF_IP}
                                aliases: 
                                        - icscf
                                        - icscf.ims.mnc001.mcc001.3gppnetwork.org
        scscf:
                tty: true
                stdin_open: true
                dns:
                        - 8.8.8.8
                        - ${DNS_IP}
                dns_search:
                        - ims.mnc001.mcc001.3gppnetwork.org
                environment:
                        - KAMAILIO_COMPONENT=scscf
                image: kamailio_docker
                env_file:
                        - .env
                container_name: kamailio_scscf
                volumes:
                        - ./kamailio_docker/scscf:/mnt
                depends_on: 
                        - pcscf
                networks:
                        appnet:
                                ipv4_address: ${KAMAILIO_SCSCF_IP}
                                aliases:
                                        - scscf
                                        - scscf.ims.mnc001.mcc001.3gppnetwork.org
        rtpengine:
                networks:
                        appnet:
                                ipv4_address: ${KAMAILIO_RTP_IP}
                tty: true
                stdin_open: true
                expose:
                        - "2223/tcp"
                privileged: true
                environment:
                        - TABLE=0
                        - INTERFACE=${KAMAILIO_RTP_IP}
                        - LISTEN_NG=${KAMAILIO_RTP_IP}:2223
                        - PIDFILE=/run/ngcp-rtpengine-daemon.pid
                        - PORT_MAX=50000
                        - PORT_MIN=49000
                        - NO_FALLBACK=no
                        - TOS=184
                build: ./rtpengine
                container_name: kamailio_rtpengine
                volumes: 
                        - ./rtpengine:/mnt
        ############ END KAMAILIO ##############
        ############ OPENIMSCORE ###############
        openims_pcscf:
                build: ./openimscore/ser_ims
                environment:
                        - OPENIMS_COMPONENT=pcscf
                volumes: 
                        - ./openimscore/ser_ims/pcscf:/mnt
                image: openimscore_docker
                expose:
                        - "4060/tcp"
                        - "4060/udp"
                depends_on:
                        openims_mysql:
                                condition: service_healthy
                tty: true
                stdin_open: true
                container_name: openims_pcscf
                env_file:
                        - .env
                networks:
                        appnet:
                                ipv4_address: ${OPENIMS_PCSCF_IP}
                                aliases:
                                        - pcscf.open-ims.test
        openims_icscf:
                environment:
                        - OPENIMS_COMPONENT=icscf
                volumes: 
                        - ./openimscore/ser_ims/icscf:/mnt
                image: openimscore_docker
                tty: true
                expose:
                        - "5060/tcp"
                        - "5060/udp"
                stdin_open: true
                depends_on: 
                        openims_mysql:
                                condition: service_healthy
                        openims_pcscf:
                                condition: service_started

                env_file:
                        - .env
                container_name: openims_icscf
                networks:
                        appnet:
                                ipv4_address: ${OPENIMS_ICSCF_IP}
                                aliases:
                                        - icscf.open-ims.test
        openims_scscf:
                environment:
                        - OPENIMS_COMPONENT=scscf
                volumes: 
                        - ./openimscore/ser_ims/scscf:/mnt
                image: openimscore_docker
                tty: true
                stdin_open: true
                expose:
                        - "6060/tcp"
                        - "6060/udp"
                container_name: openims_scscf
                env_file:
                        - .env
                depends_on: 
                        - openims_pcscf
                networks:
                        appnet:
                                ipv4_address: ${OPENIMS_SCSCF_IP}
                                aliases:
                                        - scscf.open-ims.test
        openims_mysql: 
                env_file:
                        - .env
                environment:
                        - MYSQL_ROOT_PASSWORD=${OPENIMS_MYSQL_PWD}
                networks:
                        appnet:
                                ipv4_address: ${OPENIMS_MYSQL_IP}
                expose:
                        - "3306/tcp"
                image: mysql:5.7
                container_name: openims_mysql
                healthcheck:
                        test: ["CMD", "mysql", "-u", "root", "-proot"]
                        timeout: 10s
                        interval: 10s

        ############ END OPENIMSCORE ###########
        dns:
                networks:
                        appnet:
                                ipv4_address: ${DNS_IP}
                                aliases:
                                        - dns
                tty: true
                stdin_open: true
                build: ./dns
                env_file:
                        - .env
                container_name: dns
                volumes: 
                        - ./dns/dns_conf:/mnt

networks:
        appnet:
                #driver: bridge
                ipam: 
                #driver: default
                        config:
                                - subnet: ${NETWORK_SUBNET}
